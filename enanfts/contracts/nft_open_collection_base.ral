// This is for the scenario where someone wants to create a collection and start
// minting NFTs one-by-one
Abstract Contract NFTOpenCollectionBase(
    nftTemplateId: ByteVec,
    collectionUri: ByteVec,
    collectionOwner: Address, // Only owner can mint
    mut totalSupply: U256
) extends NFTCollectionBase(collectionUri, collectionOwner, totalSupply) {
    event Mint(minter: Address, index: U256)

    @using(preapprovedAssets = true, updateFields = true, checkExternalCaller = false)
    pub fn mint(nftUri: ByteVec) -> (ByteVec) {
        let minter = callerAddress!()

        // checkCaller!(minter == collectionOwner, ErrorCodes.CollectionOwnerAllowedOnly)

        let nftIndex = totalSupply

        let (encodeImmutableFields, encodeMutableFields) = NFT.encodeFields!(nftUri, selfContractId!(), nftIndex)

        let contractId = copyCreateSubContractWithToken!{minter -> ALPH: 1 alph / 10}(
            toByteVec!(nftIndex),
            nftTemplateId,
            encodeImmutableFields,
            encodeMutableFields,
            1,
            minter
        )

        totalSupply = totalSupply + 1

        emit Mint(minter, nftIndex)

        // Is this what I should call to transfer the token to the minter?
        // transferTokenFromSelf!(minter, contractId, 1)

        return contractId
    }
}
